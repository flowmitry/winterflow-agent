---
# Combined playbook for configuring SSH with either key-only or password authentication
# Usage: ansible-playbook playbooks/system/security/configure_ssh.yml

- name: Configure SSH
  hosts: all
  become: true
  gather_facts: true

  roles:
    - role: check_requirements

  pre_tasks:
    - name: Validate SSH login type
      ansible.builtin.fail:
        msg: "ssh_login_type must be either 'key' or 'password'"
      when: ssh_login_type is not defined or ssh_login_type not in ['key', 'password']

  tasks:
    - name: Ensure SSH is installed
      apt:
        name: openssh-server
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Backup sshd_config
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.backup
        remote_src: yes
        force: no

    - name: Configure SSH for key-based authentication
      when: ssh_login_type == 'key'
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin prohibit-password' }
        - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
      notify: restart ssh

    - name: Configure SSH for password authentication
      when: ssh_login_type == 'password'
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication yes' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin yes' }
        - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication yes' }
      notify: restart ssh

    - name: Set strong password policies
      when: ssh_login_type == 'password' and ansible_os_family == "Debian"
      lineinfile:
        path: /etc/security/pwquality.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^#?minlen', line: 'minlen = 12' }
        - { regexp: '^#?dcredit', line: 'dcredit = -1' }
        - { regexp: '^#?ucredit', line: 'ucredit = -1' }
        - { regexp: '^#?lcredit', line: 'lcredit = -1' }
        - { regexp: '^#?ocredit', line: 'ocredit = -1' }

    - name: Ensure .ssh directory exists
      when: ssh_login_type == 'key'
      file:
        path: "{{ ansible_env.HOME }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Ensure authorized_keys file exists
      when: ssh_login_type == 'key'
      file:
        path: "{{ ansible_env.HOME }}/.ssh/authorized_keys"
        state: touch
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted
      when: ansible_os_family == "Debian" 
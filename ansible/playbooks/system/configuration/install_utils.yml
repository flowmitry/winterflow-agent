---
# Playbook for installing system utility packages
# Usage: ansible-playbook playbooks/system/configuration/install_utils.yml [-e skip_cache_update=true]

- name: Install system utilities
  hosts: all
  gather_facts: true
  vars:
    skip_cache_update: false
    utility_packages:
      - curl
      - wget
      - htop
      - git
      - jq
      - logrotate

  pre_tasks:
    - name: Fix interrupted dpkg
      shell: dpkg --configure -a
      register: dpkg_fix
      changed_when: dpkg_fix.rc != 0
      failed_when: false

    - name: Clean apt cache
      shell: apt-get clean
      when: ansible_os_family == "Debian"
      changed_when: false

  roles:
    - role: check_requirements

  tasks:
    - name: Check if packages are already installed
      package_facts:
        manager: auto
      
    - name: Display currently installed versions
      debug:
        msg: "{{ item.split('=')[0] }} version: {{ ansible_facts.packages[item.split('=')[0]][0].version | default('not installed') }}"
      loop: "{{ utility_packages }}"
      when: item.split('=')[0] in ansible_facts.packages

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: 
        - ansible_os_family == "Debian"
        - not skip_cache_update|bool
      register: apt_update
      retries: 3
      delay: 5
      until: apt_update is success
      ignore_errors: true

    - name: Install utility packages
      apt:
        name: "{{ utility_packages }}"
        state: present
        dpkg_options: 'force-confold,force-confdef'
      when: ansible_os_family == "Debian"
      register: package_install
      retries: 3
      delay: 5
      until: package_install is success

    - name: Verify package installation
      package_facts:
        manager: auto
      
    - name: Display installed package versions
      debug:
        msg: "Successfully installed {{ item.split('=')[0] }}: version {{ ansible_facts.packages[item.split('=')[0]][0].version }}"
      loop: "{{ utility_packages }}"
      when: item.split('=')[0] in ansible_facts.packages

    - name: Check for installation failures
      fail:
        msg: "Failed to install package: {{ item.split('=')[0] }}"
      when: item.split('=')[0] not in ansible_facts.packages
      loop: "{{ utility_packages }}" 
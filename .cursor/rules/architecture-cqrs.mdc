---
description:
globs:
alwaysApply: true
---
# CQRS

## Command Implementation Guidelines

When implementing commands:

1. Define domain models in `internal/domain/model/`
2. Define command struct in application layer using domain models
3. Pass properties directly to the Commands, do not create Request models
4. Implement command handler that uses domain models
5. Use direct transformation in infrastructure layer to convert between domain and infrastructure models

Example:

```go
// Command using domain models
type SaveAppCommand struct {
    AppID     string
    Config    *model.AppConfig
    Variables model.VariableMap
    Files     map[string][]byte
}

// Handler using domain models
func (h *SaveAppHandler) Handle(cmd SaveAppCommand) error {
    // Implementation using domain models
}

// Infrastructure layer using direct transformation
func HandleSaveAppRequest(commandBus cqrs.CommandBus, saveAppRequest *pb.SaveAppRequestV1, agentID string) (*pb.AgentMessage, error) {
    // Convert variables to VariableMap
    variables := make(model.VariableMap)
    for _, v := range saveAppRequest.App.Variables {
        variables[v.Id] = string(v.Content)
    }

    // Convert files to map[string][]byte
    files := make(map[string][]byte)
    for _, file := range saveAppRequest.App.Files {
        files[file.Id] = file.Content
    }

    // Parse config bytes into AppConfig
    appConfig, err := model.ParseAppConfig(saveAppRequest.App.Config)
    if err != nil {
        log.Error("Error parsing app config: %v", err)
        appConfig = &model.AppConfig{ID: saveAppRequest.App.AppId}
    }

    // Create and dispatch the command
    cmd := SaveAppCommand{
        AppID:     saveAppRequest.App.AppId,
        Config:    appConfig,
        Variables: variables,
        Files:     files,
    }

    // Dispatch the command to the handler
    err := commandBus.Dispatch(cmd)

    // Handle the response
    // ...
}
```

## Query Implementation Guidelines

When implementing queries:

1. Define domain models in `internal/domain/model/`
2. Define query struct in application layer using domain models
3. Pass properties directly to the Queries, do not create Request models
4. Implement query handler that returns domain models
5. Use assemblers in infrastructure layer to transform between domain and infrastructure models

Example:
```go
// Query using domain models
type GetAppQuery struct {
    Request *model.GetAppRequest
}

// Handler returning domain models
func (h *GetAppQueryHandler) Handle(query GetAppQuery) (*model.App, error) {
    // Implementation using domain models
}

// Infrastructure layer using assemblers
func HandleGetAppQuery(queryBus cqrs.QueryBus, getAppRequest *pb.GetAppRequestV1) {
    // Convert request to domain model
    domainRequest := FromProtoGetAppRequest(getAppRequest)

    // Create and dispatch query
    query := GetAppQuery{Request: domainRequest}
    result, err := queryBus.Dispatch(query)

    // Convert result back to infrastructure model
    domainApp := result.(*model.App)
    protoApp := ToProtoApp(domainApp)
}
```
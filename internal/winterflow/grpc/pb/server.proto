syntax = "proto3";

package pb;

option go_package = "winterflow-agent/internal/winterflow/grpc/pb";


// Response codes for all responses
enum ResponseCode {
  RESPONSE_CODE_UNSPECIFIED = 0;
  RESPONSE_CODE_SUCCESS = 1;
  RESPONSE_CODE_INVALID_REQUEST = 2;
  RESPONSE_CODE_UNAUTHORIZED = 3;
  RESPONSE_CODE_SERVER_ERROR = 4;
  RESPONSE_CODE_AGENT_NOT_FOUND = 5;
  RESPONSE_CODE_SERVER_NOT_FOUND = 6;
  RESPONSE_CODE_AGENT_ALREADY_CONNECTED = 7;
}

// Agent registration messages
message RegisterAgentRequestV1 {
  string version = 1;
  map<string, string> capabilities = 2;
  map<string, bool> features = 3;
  string server_id = 4;
  string server_token = 5;
}

message RegisterAgentResponseV1 {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  ResponseCode response_code = 4;
}

message UnregisterAgentRequestV1 {
  string server_id = 1;
  string access_token = 2;
}

message UnregisterAgentResponseV1 {
  bool success = 1;
  string message = 2;
  ResponseCode response_code = 3;
}

// Agent heartbeat and status messages
message AgentHeartbeatV1 {
  string server_id = 1;
  string access_token = 2;
  map<string, string> metrics = 3;
}

message AgentHeartbeatResponseV1 {
  bool success = 1;
  string message = 2;
  ResponseCode response_code = 3;
}

// Agent service definition
service AgentService {
  // Register an agent
  rpc RegisterAgentV1(RegisterAgentRequestV1) returns (RegisterAgentResponseV1) {}

  // Unregister an agent
  rpc UnregisterAgentV1(UnregisterAgentRequestV1) returns (UnregisterAgentResponseV1) {}

  // Bidirectional streaming for agent communication
  rpc AgentStreamV1(stream AgentHeartbeatV1) returns (stream AgentHeartbeatResponseV1) {}
}
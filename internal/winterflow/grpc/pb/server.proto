syntax = "proto3";

package pb;

option go_package = "winterflow-agent/internal/winterflow/grpc/pb";
import "google/protobuf/timestamp.proto";


// Response codes for all responses
enum ResponseCode {
  RESPONSE_CODE_UNSPECIFIED = 0;
  RESPONSE_CODE_SUCCESS = 1;
  RESPONSE_CODE_INVALID_REQUEST = 2;
  RESPONSE_CODE_TOO_MANY_REQUESTS = 3;
  RESPONSE_CODE_UNAUTHORIZED = 4;
  RESPONSE_CODE_SERVER_ERROR = 5;
  RESPONSE_CODE_AGENT_NOT_FOUND = 6;
  RESPONSE_CODE_AGENT_ALREADY_CONNECTED = 7;
}

enum AppStatusCode {
  STATUS_CODE_UNKNOWN = 0;
  STATUS_CODE_ACTIVE = 1;
  STATUS_CODE_IDLE = 2;
  STATUS_CODE_RESTARTING = 3;
  STATUS_CODE_PROBLEMATIC = 4;
  STATUS_CODE_STOPPED = 5;
}

enum AppAction {
  STOP = 0;
  START = 1;
  RESTART = 2;
  UPDATE = 3;
}

enum AppType {
  DOCKER_COMPOSE = 0;
  DOCKER_SWARM = 1;
}

message BaseMessage {
  // UUID
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  // UUID
  string agent_id = 3;
}

message BaseResponse {
  // UUID
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  ResponseCode response_code = 3;
  string message = 4;
  // UUID
  string agent_id = 5;
}

// Agent registration messages
message RegisterAgentRequestV1 {
  BaseMessage base = 1;
  map<string, string> capabilities = 2;
  map<string, bool> features = 3;
}

message RegisterAgentResponseV1 {
  BaseResponse base = 1;
}

// Agent heartbeat message
message AgentHeartbeatV1 {
  BaseMessage base = 1;
  map<string, string> metrics = 2;
}

message HeartbeatResponseV1 {
  BaseResponse base = 1;
}

message AppContainerStatusV1 {
  // UUID
  string container_id = 1;
  string container_name = 2;
  AppStatusCode status_code = 3;
}

message AppStatusV1 {
  // UUID
  string app_id = 1;
  AppStatusCode status_code = 2;
  repeated AppContainerStatusV1 containers = 3;
}

message AppFileV1 {
  // uuid
  string id = 1;
  // text or binary content
  bytes content = 2;
}

message AppVarV1 {
  // uuid
  string id = 1;
  // text or binary content
  bytes content = 2;
}

message AppV1 {
  // UUID
  string app_id = 1;
  // JSON
  bytes config = 2;
  repeated AppVarV1 variables = 3;
  repeated AppVarV1 secrets = 4;
  repeated AppFileV1 files = 5;
}

message GetAppRequestV1 {
  BaseMessage base = 1;
  // UUID
  string app_id = 2;
  uint32 app_version = 3;
}

message GetAppResponseV1 {
  BaseResponse base = 1;
  AppV1 app = 2;
  uint32 app_version = 3;
}

message UpdateAgentRequestV1 {
  BaseMessage base = 1;
  string version = 2;
}

message UpdateAgentResponseV1 {
  BaseResponse base = 1;
}

message SaveAppRequestV1 {
  BaseMessage base = 1;
  AppV1 app = 2;
}

message SaveAppResponseV1 {
  BaseResponse base = 1;
  AppV1 app = 2;
}

message DeleteAppRequestV1 {
  BaseMessage base = 1;
  // UUID
  string app_id = 2;
}

message DeleteAppResponseV1 {
  BaseResponse base = 1;
}

message ControlAppRequestV1 {
  BaseMessage base = 1;
  // UUID
  string app_id = 2;
  uint32 app_version = 3;
  AppAction action = 4;
}

message ControlAppResponseV1 {
  BaseResponse base = 1;
  // UUID
  string app_id = 2;
  uint32 app_version = 3;
  AppStatusCode status_code = 4;
}

message GetAppsStatusRequestV1 {
  BaseMessage base = 1;
}

message GetAppsStatusResponseV1 {
  BaseResponse base = 1;
  repeated AppStatusV1 apps = 2;
}

// Command messages for bidirectional streaming
message ServerCommand {
  oneof command {
    // Responses for messages initialized by an agent
    HeartbeatResponseV1 heartbeat_response_v1 = 1;

    // Commands initialized by the server
    UpdateAgentRequestV1 update_agent_request_v1 = 2;
    GetAppRequestV1 get_app_request_v1 = 3;
    SaveAppRequestV1 save_app_request_v1 = 4;
    DeleteAppRequestV1 delete_app_request_v1 = 5;
    ControlAppRequestV1 control_app_request_v1 = 6;
    GetAppsStatusRequestV1 get_apps_status_request_v1 = 7;
  }
}

message AgentMessage {
  oneof message {
    // Messages initialized by an agent
    AgentHeartbeatV1 heartbeat_v1 = 1;

    // Responses for commands initialized by the server
    UpdateAgentResponseV1 update_agent_response_v1 = 2;
    GetAppResponseV1 get_app_response_v1 = 3;
    SaveAppResponseV1 save_app_response_v1 = 4;
    DeleteAppResponseV1 delete_app_response_v1 = 5;
    ControlAppResponseV1 control_app_response_v1 = 6;
    GetAppsStatusResponseV1 get_apps_status_response_v1 = 7;
  }
}

// Agent service definition
service AgentService {
  // Registers an agent with the server and establishes identity
  // Returns success if registration is accepted or appropriate error code
  rpc RegisterAgentV1(RegisterAgentRequestV1) returns (RegisterAgentResponseV1) {}

  // Establishes a bidirectional stream between agent and server
  // Allows:
  // 1. agent to send heartbeats and server to respond to them
  // 2. server to send commands and agent to send responses
  rpc AgentStream(stream AgentMessage) returns (stream ServerCommand) {}
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: internal/grpc/pb/server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentService_RegisterAgentV1_FullMethodName   = "/pb.AgentService/RegisterAgentV1"
	AgentService_UnregisterAgentV1_FullMethodName = "/pb.AgentService/UnregisterAgentV1"
	AgentService_AgentStreamV1_FullMethodName     = "/pb.AgentService/AgentStreamV1"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// Register an agent
	RegisterAgentV1(ctx context.Context, in *RegisterAgentRequestV1, opts ...grpc.CallOption) (*RegisterAgentResponseV1, error)
	// Unregister an agent
	UnregisterAgentV1(ctx context.Context, in *UnregisterAgentRequestV1, opts ...grpc.CallOption) (*UnregisterAgentResponseV1, error)
	// Bidirectional streaming for agent communication
	AgentStreamV1(ctx context.Context, opts ...grpc.CallOption) (AgentService_AgentStreamV1Client, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) RegisterAgentV1(ctx context.Context, in *RegisterAgentRequestV1, opts ...grpc.CallOption) (*RegisterAgentResponseV1, error) {
	out := new(RegisterAgentResponseV1)
	err := c.cc.Invoke(ctx, AgentService_RegisterAgentV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UnregisterAgentV1(ctx context.Context, in *UnregisterAgentRequestV1, opts ...grpc.CallOption) (*UnregisterAgentResponseV1, error) {
	out := new(UnregisterAgentResponseV1)
	err := c.cc.Invoke(ctx, AgentService_UnregisterAgentV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentStreamV1(ctx context.Context, opts ...grpc.CallOption) (AgentService_AgentStreamV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_AgentStreamV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceAgentStreamV1Client{stream}
	return x, nil
}

type AgentService_AgentStreamV1Client interface {
	Send(*AgentHeartbeatV1) error
	Recv() (*AgentHeartbeatResponseV1, error)
	grpc.ClientStream
}

type agentServiceAgentStreamV1Client struct {
	grpc.ClientStream
}

func (x *agentServiceAgentStreamV1Client) Send(m *AgentHeartbeatV1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentServiceAgentStreamV1Client) Recv() (*AgentHeartbeatResponseV1, error) {
	m := new(AgentHeartbeatResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// Register an agent
	RegisterAgentV1(context.Context, *RegisterAgentRequestV1) (*RegisterAgentResponseV1, error)
	// Unregister an agent
	UnregisterAgentV1(context.Context, *UnregisterAgentRequestV1) (*UnregisterAgentResponseV1, error)
	// Bidirectional streaming for agent communication
	AgentStreamV1(AgentService_AgentStreamV1Server) error
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) RegisterAgentV1(context.Context, *RegisterAgentRequestV1) (*RegisterAgentResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgentV1 not implemented")
}
func (UnimplementedAgentServiceServer) UnregisterAgentV1(context.Context, *UnregisterAgentRequestV1) (*UnregisterAgentResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterAgentV1 not implemented")
}
func (UnimplementedAgentServiceServer) AgentStreamV1(AgentService_AgentStreamV1Server) error {
	return status.Errorf(codes.Unimplemented, "method AgentStreamV1 not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_RegisterAgentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RegisterAgentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_RegisterAgentV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RegisterAgentV1(ctx, req.(*RegisterAgentRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UnregisterAgentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterAgentRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UnregisterAgentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UnregisterAgentV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UnregisterAgentV1(ctx, req.(*UnregisterAgentRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentStreamV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).AgentStreamV1(&agentServiceAgentStreamV1Server{stream})
}

type AgentService_AgentStreamV1Server interface {
	Send(*AgentHeartbeatResponseV1) error
	Recv() (*AgentHeartbeatV1, error)
	grpc.ServerStream
}

type agentServiceAgentStreamV1Server struct {
	grpc.ServerStream
}

func (x *agentServiceAgentStreamV1Server) Send(m *AgentHeartbeatResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentServiceAgentStreamV1Server) Recv() (*AgentHeartbeatV1, error) {
	m := new(AgentHeartbeatV1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgentV1",
			Handler:    _AgentService_RegisterAgentV1_Handler,
		},
		{
			MethodName: "UnregisterAgentV1",
			Handler:    _AgentService_UnregisterAgentV1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentStreamV1",
			Handler:       _AgentService_AgentStreamV1_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/grpc/pb/server.proto",
}

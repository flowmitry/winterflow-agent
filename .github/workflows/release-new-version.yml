name: Agent Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        type: boolean
        default: false
      release_message:
        description: 'Release message (optional)'
        required: false
        type: string
        default: ''

concurrency:
  group: "winterflow-agent-release"
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  agent-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Go version from go.mod
        id: goversion
        run: |
          GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | cut -d ' ' -f 2)
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.goversion.outputs.version }}
          check-latest: true

      - name: Build binaries
        env:
          VERSION: ${{ github.event.inputs.version }}
          CGO_ENABLED: 0
        run: |
          # Remove 'v' prefix for semantic version used in build flags
          SEMVER=${VERSION#v}
          
          # Build for linux/amd64
          echo "Building for linux/amd64..."
          GOOS=linux GOARCH=amd64 go build -v -ldflags="-s -w -X winterflow-agent/internal/application/version.version=${SEMVER}" -o winterflow-agent-linux-amd64 ./cmd/agent/main.go
          
          # Build for linux/arm64
          echo "Building for linux/arm64..."
          GOOS=linux GOARCH=arm64 go build -v -ldflags="-s -w -X winterflow-agent/internal/application/version.version=${SEMVER}" -o winterflow-agent-linux-arm64 ./cmd/agent/main.go

          # Build for darwin/amd64 (macOS Intel)
          echo "Building for darwin/amd64..."
          GOOS=darwin GOARCH=amd64 go build -v -ldflags="-s -w -X winterflow-agent/internal/application/version.version=${SEMVER}" -o winterflow-agent-darwin-amd64 ./cmd/agent/main.go

          # Build for darwin/arm64 (macOS Apple Silicon)
          echo "Building for darwin/arm64..."
          GOOS=darwin GOARCH=arm64 go build -v -ldflags="-s -w -X winterflow-agent/internal/application/version.version=${SEMVER}" -o winterflow-agent-darwin-arm64 ./cmd/agent/main.go

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.event.inputs.version }}" \
            winterflow-agent-linux-* \
            winterflow-agent-darwin-* \
            --title "Release ${{ github.event.inputs.version }}" \
            --notes "${{ github.event.inputs.release_message }}" \
            --draft=false \
            --prerelease=${{ github.event.inputs.prerelease }}

      - name: Trigger registration workflow
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get release information
          RELEASE_INFO=$(gh release view "${{ github.event.inputs.version }}" --json url,body,isPrerelease)
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.url')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // ""' | head -n1 | sed 's/"/\\"/g' | sed 's/\r//g')
          IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.isPrerelease')
          
          # Create JSON payload
          PAYLOAD=$(jq -n \
            --arg version "${{ github.event.inputs.version }}" \
            --arg url "$RELEASE_URL" \
            --argjson is_beta "$IS_PRERELEASE" \
            --arg message "$RELEASE_BODY" \
            '{
              "event_type": "agent_release_created",
              "client_payload": {
                "version": $version,
                "url": $url,
                "is_beta": $is_beta,
                "message": $message
              }
            }')
          
          # Trigger repository dispatch event
          echo "$PAYLOAD" | gh api repos/${{ github.repository }}/dispatches --method POST --input -